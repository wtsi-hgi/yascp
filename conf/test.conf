/*
========================================================================================
    Nextflow config file for running full-size tests
========================================================================================
    Defines input files and everything required to run a full size pipeline test.

    Use as follows:
        nextflow run nf-core/yascp -profile test_full,<docker/singularity>

----------------------------------------------------------------------------------------
*/

params {
    output_dir = outdir= "${launchDir}/full_test_results"
    config_profile_name        = 'Full test profile'
    config_profile_description = 'Full test dataset to check pipeline function'
    profile = 'test_full'
    input_data_table = "https://yascp.cog.sanger.ac.uk/public/test_datasets/full_test_dataset/input.tsv" //Required!! This points to all the cellranger files and pool definition files.
    split_ad_per_bach=true //if not splitting the celltype assignment will be run on full tranche 
    genotype_input {
        run_with_genotype_input=true //if false do not need the genotype_input parameters.
        vireo_with_gt=false // Vireo is capable in runing both with genotypes and without. Here we define in which mode we want to run it.
        posterior_assignment = false //if this is set to true, we will perform the genotype donor matching after the deconvolution is performed.
        subset_genotypes = false
        tsv_donor_panel_vcfs = "https://yascp.cog.sanger.ac.uk/public/test_datasets/full_test_dataset/vcf_inputs_v2.tsv" //this is a panel of vcf files that we want to compar the genotypes with
        ZSCORE_THRESH = 3 //# Minimum z0 threshold required to call the gt assignment confident. 
        ZSCORE_DIST_THRESH = 3 //# Minimum bifference between z0 and z1 to call the assignment confident,
        genotype_correlation_threshold = 0.6 //# Threshod to be used to determine sample correlation and which samples are coming from same donor.     
    }

    harmony.run_process=false
    bbknn.run_process=false
    //# For the training purposes we reduce the cellbender epochs and learning rate as this step takes a long time to compute.
    utilise_gpu = false //#true
    input = 'cellranger' //#'cellbender' 
    cellbender_resolution_to_use='0pt1'
    cellbender_rb{
        estimate_params_umis{
                value{
                    expected_nemptydroplets_umi_cutoff = 0
                    method_estimate_ncells = 'dropletutils::barcoderanks::inflection'
                    lower_bound_umis_estimate_ncells = 1000
                    method_estimate_nemptydroplets = 'dropletutils::barcoderanks::inflection,dropletutils::barcoderanks::knee,0.33'
                    lower_bound_umis_estimate_nemptydroplets = 10
                    upper_bound_umis_estimate_nemptydroplets = 250
                    estimate_nemptydroplets_umi_add_factor = 0
                    estimate_nemptydroplets_subtract_cell_factor = 0
                    estimate_nemptydroplets_min_drop = 0
                }
            }
            epochs{
                value = 10
            }
            learning_rate{
                value = 0.001
            }
            zdim{
                value = 100
            }
            zlayers{
                value = 500
            }
            low_count_threshold{
                value = 10
            }
            fpr{
                value = "0.01 0.05 0.1"
            }

    }


}

process {

    withName: PREP_MERGE_SAMPLES_FROM_H5AD{
        cpus   = 1
        maxRetries    = 2
        maxForks = 4
    }
    
}