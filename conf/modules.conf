/*
========================================================================================
    Config file for defining DSL2 per module options
========================================================================================
    Available keys to override module options:
        args            = Additional arguments appended to command in module.
        args2           = Second set of arguments appended to command in module (multi-tool modules).
        args3           = Third set of arguments appended to command in module (multi-tool modules).
        publish_dir     = Directory to publish results.
        publish_by_meta = Groovy list of keys available in meta map to append as directories to "publish_dir" path
            If publish_by_meta = true                 - Value of ${meta['id']} is appended as a directory to "publish_dir" path
            If publish_by_meta = ['id', 'custompath'] - If "id" is in meta map and "custompath" isnt then "${meta['id']}/custompath/"
                                                                        is appended as a directory to "publish_dir" path
                            If publish_by_meta = false / null         - No directories are appended to "publish_dir" path
        publish_files   = Groovy map where key = "file_ext" and value = "directory" to publish results for that file extension
                            The value of "directory" is appended to the standard "publish_dir" path as defined above.
                            If publish_files = null (unspecified)     - All files are published.
                            If publish_files = false                  - No files are published.
        suffix          = File name suffix for output files.
----------------------------------------------------------------------------------------
*/


params {
    modules {
        'fastqc' {
            args = "--quiet"
        }
        'multiqc' {
            args = ""
        }
        'cellsnp' {
                scratch = '/tmp'
                stageInMode = 'copy'
                stageOutMode = 'move'
                disk = '200 GB'
                maxForks = 200

                memory = '100G'
                cpus = 24
                maxRetries = 1
        }
        'souporcell' {
                scratch = '/tmp'
                stageInMode = 'copy'
                stageOutMode = 'move'
                disk = '20 GB'
                maxForks = 200
                memory = '10G'
                cpus = 24
                maxRetries = 0
        }

    }



}


process {
    withName: SCRUBLET{
        maxRetries    = 3
        errorStrategy = { task.attempt > 2 ? 'ignore' : 'retry' }
    }


    //# withName: DOUBLET_DECON{
    //#     maxRetries    = 3
    //#     errorStrategy = { task.attempt > 2 ? 'ignore' : 'retry' }
    //#     memory = { 50.GB * task.attempt }
    //# }
    
    withName: AZIMUTH{
        maxRetries    = 3
        errorStrategy = { task.attempt > 2 ? 'ignore' : 'retry' }
    }
    withName: CELLTYPIST{
        maxRetries    = 3
        errorStrategy = { task.attempt > 2 ? 'ignore' : 'retry' }
    }
    //# withName: cellbender__remove_background{
    //#     maxRetries    = 2
    //#     //# errorStrategy = { task.attempt > 2 ? 'ignore' : 'retry' }
    //# }

    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }

    withName:cluster_validate_resolution_keras{
        maxForks=4
        maxRetries    = 3
        memory = { 60.GB * task.attempt }
        time   = { 12.h   * task.attempt }
        errorStrategy = { task.attempt > 2 ? 'ignore' : 'retry' }
    }

    withName: CELLTYPIST{
        maxForks=7
    }

    withName: ASSESS_CALL_RATE{
        maxRetries    = 3
        memory = { 10.GB * task.attempt }
        errorStrategy = { task.attempt > 2 ? 'ignore' : 'retry' }
    }


    withName: CELLTYPE_FILE_MERGE{
        memory = { 60.GB * task.attempt }
    }

    withName: NORMALISE_AND_PCA{
        maxForks=7
        errorStrategy = 'retry'
        memory = { 50.GB * task.attempt}
        maxRetries    = 8
        cpus   = 4
    }
    
    withName: LISI{
        maxForks=7
        memory =300.GB
    }

    withName: RESOLVE_POOL_VCFS{
        cpus =  1
        memory = { 1.GB * task.attempt }
        time   = {  12.h   * task.attempt }
        maxRetries    = 3
    }

    withName: SPLIT_BATCH_H5AD{
        cpus =  1
        memory = { 25.GB * task.attempt * 0.5}
        time   = {  12.h   * task.attempt }
        maxRetries    = 3
    }

    withName: SUBSET_GENOTYPE2{
        cpus =  1
        memory = { 1.GB * task.attempt }
        time   = {  12.h   * task.attempt }
        maxRetries    = 3
    }

    withName: JOIN_STUDIES_MERGE{
        cpus =  1
        memory = { 20.GB * task.attempt }
        time   = {  12.h   * task.attempt }
        maxRetries    = 3
    }    
    

    withName: GT_MATCH_POOL_AGAINST_PANEL{
        time   = { 2.h   * task.attempt }
        maxRetries    = 2
    }

    withName: FREEBAYES{
        cpus =  1
        time   = {  12.h   * task.attempt }
        maxRetries    = 2
    }

    withName: VIREO_ADD_SAMPLE_PREFIX{
        cpus =  1
        memory = { 2.GB * task.attempt }
        time   = {  12.h   * task.attempt }
        maxRetries    = 3
    }


    withName: REPLACE_GT_DONOR_ID2{
        cpus =  1
        memory = { 1.GB * task.attempt }
        time   = 12.h
        maxRetries    = 3
    }

    withName: JOIN_CHROMOSOMES{
        cpus =  1
        memory = { 2.GB * task.attempt }
        time   = 12.h
        maxRetries    = 3
    }

    withName: serialize_known_markers{
        cpus =  1
        memory = { 1.GB * task.attempt }
        time   = {  12.h   * task.attempt }
        maxRetries    = 3
    }

    withName: OUTLIER_FILTER{
        errorStrategy = 'retry'
        memory = { 50.GB * task.attempt}
        maxRetries    = 8
    }

   

    withName: cluster{
        cpus   = {  3     * task.attempt }
    }

    withName: LISI{
        maxForks=7
        errorStrategy = 'retry'
        maxRetries    = 8
        memory = { 200.GB * task.attempt}
    }

    withName: VIREO_GT_FIX_HEADER{
        errorStrategy = 'retry'
        maxRetries    = 4
        cpus = 1
        memory = { 1.GB * task.attempt }
    }


    withName: JOIN_CHROMOSOMES{
        errorStrategy = 'retry'
        maxRetries    = 4
    }

    withName: cluster{
        errorStrategy = 'retry'
        maxRetries    = 4
    }

    withName: SPLIT_BAM_BY_CELL_BARCODES {
      cpus = 1
      memory = { 8.GB * task.attempt}
      time = 4.h
    }

    withName: CONCORDANCE_CALCLULATIONS{
        cpus   = {  10     * task.attempt }
        time   = {  24.h   * task.attempt }
        memory = { 100.GB * task.attempt }
    }

    withName: OTHER_DONOR_CONCORDANCE_CALCLULATIONS{
        cpus = 3
        time   = {  6.h   * task.attempt }
        memory = { 20.GB * task.attempt }
    }


    withName: CELLSNP{
        memory = { 5.GB * task.attempt }
    }

    withName: DYNAMIC_DONOR_EXCLUSIVE_SNP_SELECTION{
        cpus = 1
        time   = { 2.h   * task.attempt }
        memory = { 20.GB * task.attempt }
    }

    withName: prep_collectmetadata{
        memory = { 150.MB * task.attempt }
    }

    withName: VIREO{
        //# maxForks=7
        cpus   = 5
        time   = { 12.h   * task.attempt }
        memory = { 70.GB * task.attempt }
    }
    withName: DSB_INTEGRATE{
        memory = { 200.GB * task.attempt }
        cpus   = {  4     * task.attempt }
        maxRetries    = 3
    }

    withName: MULTIMODAL_INTEGRATION{
        memory = { 200.GB * task.attempt }
        cpus   = {  4     * task.attempt }
        maxRetries    = 3
    }

    withName: umap_gather{
        memory = { 200.GB * task.attempt }
        errorStrategy = 'retry'
        maxRetries    = 3
    }

    withName: DOUBLET_FINDER{
        memory = { 50.GB * task.attempt }
    }

    
    withName: plot_predicted_sex{
        memory = { 50.GB * task.attempt }
        maxRetries = 5
        cpus = 1

    }

}